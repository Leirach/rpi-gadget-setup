#!/usr/bin/expect --

set timeout -1
proc slurp {file} {
    set fh [open $file r]
    set ret [read $fh]
    close $fh
    return $ret
}

set imageName [lindex $argv 0]

if {[string trimleft $imageName] eq ""} {
  puts "No Image file provided"
  exit
}

set cwd [file normalize [file dirname $argv0]]
set imagePath [file join $cwd $imageName]
puts $imageName
puts $imagePath\n

spawn docker run --name dockerpi -it --rm -v $imagePath:/sdcard/filesystem.img lukechilds/dockerpi:vm pi3

expect "raspberrypi login: "
#TODO: Make sure to find a more elegant solution to this.
sleep 30
send $env(USERNAME)
send "\n"
expect "Password: "
send $env(PASSWORD)
send "\n"

####################
# INSTALL PACKAGES #
####################
expect "$ "
send "sudo apt-get update\n"
expect "$ "
# send "sudo apt-get -y upgrade\n"
# expect "$ "
send "sudo apt-get -y install dnsmasq network-manager bridge-utils debian-keyring debian-archive-keyring apt-transport-https\n"
expect "$ "
send "sudo apt-get clean\n"

###########################
# ACTIVATE NETWORKMANAGER #
###########################

expect "$ "
send "sudo systemctl enable --now NetworkManager\n"

#################
# INSTALL CODER #
#################

# install coder
expect "$ "
send "sudo curl -fsSL https://raw.githubusercontent.com/coder/code-server/main/install.sh | sh\n"

expect "$ "
send "sudo systemctl enable code-server@\$USER\n"

expect "$ "
send "sudo sed -i '/^\\\[Service\\\]/a AmbientCapabilities=CAP_NET_BIND_SERVICE' /lib/systemd/system/code-server@.service\n"


# configure coder
send "sudo mkdir -p ~/.config/code-server\n"

expect "$ "
set file [slurp "userhome/.config/code-server/config.yaml"]

expect "$ "
send "sudo bash -c 'cat > /home/"
send $env(USERNAME)
send "/.config/code-server/config.yaml' << EOF\n"
send "$file\n"
send "EOF\n"

#################
# INSTALL CADDY #
#################
expect "$ "
send "curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\n"

expect "$ "
send "curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\n"

expect "$ "
send "sudo apt-get update\n"

expect "$ "
send "sudo apt-get install caddy\n"

set file [slurp "etc/caddy/Caddyfile"]
expect "$ "
send "sudo bash -c 'cat > /etc/caddy/Caddyfile' << EOF\n"
send "$file\n"
send "EOF\n"

expect "$ "
send "sudo systemctl reload caddy\n"

###################
# SWITCH TO ROOT  #
###################
expect "$ "
send "sudo su -\n"

########################
# SETUP NETWORK BRIDGE #
########################
expect "# "
send "sudo brctl addbr br0\n"

########################
# CONFIGURE DNS SERVER #
########################
set file [slurp "etc/dnsmasq.d/usb0"]
expect "# "
send "cat << 'EOF' > /etc/dnsmasq.d/usb0\n"
send "$file\n"
send "EOF\n"

set file [slurp "etc/network/interfaces.d/usb0"]
expect "# "
send "cat << 'EOF' > /etc/network/interfaces.d/usb0\n"
send "$file\n"
send "EOF\n"


########################
# CONFIGURE USB GADGET #
########################
set file [slurp "usr/local/sbin/multigadget"]
expect "# "
send "cat << 'EOF' > /usr/local/sbin/multigadget\n"
send "$file\n"
send "EOF\n"
expect "# "
send "chmod +x /usr/local/sbin/multigadget\n"

set file [slurp "lib/systemd/system/multigadget.service"]
expect "# "
send "cat << 'EOF' > /lib/systemd/system/multigadget.service\n"
send "$file\n"
send "EOF\n"
expect "# "
send "systemctl enable multigadget.service\n"


####################
# CONFIGURE KERNEL #
####################
expect "# "
send "echo dtoverlay=dwc2 >> /boot/config.txt\n"

expect "# "
send "touch /boot/ssh\n"

expect "# "
send "echo dwc2 >> /etc/modules\n"
send "echo libcomposite >> /etc/modules\n"



##################
# CONFIGURE DHCP #
##################
expect "# "
send "echo denyinterfaces usb0 br0 >> /etc/dhcpcd.conf\n"

##########################
# ENABLE NETWORK MANAGER #
##########################
expect "# "
send "raspi-config nonint do_netconf 2\n"

################
# SET HOSTNAME #
################
expect "# "
send "raspi-config nonint do_hostname "
send $env(HOSTNAME)
send "\n"

##############
# ENABLE SSH #
##############
expect "# "
send "raspi-config nonint do_ssh 0\n"
expect "# "

##########
# FINISH #
##########
send "poweroff\n"

expect "reboot: Power down"
exec docker stop dockerpi
exit
